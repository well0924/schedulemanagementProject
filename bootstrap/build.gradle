plugins{
	id 'org.springframework.boot' version '3.2.2'
	id 'java'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {

	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.springframework.kafka:spring-kafka'
	//open-feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	implementation project(':common:security')
	implementation project(':common:jpa')
	implementation project(':common:logging')
	implementation project(':common:exception')
	implementation project(':common:redis')
	implementation project(':common:events')
	implementation project(':common:s3')
	implementation project(':domain:member:api:controller')
	implementation project(':domain:member:connector:out-bound')
	implementation project(':domain:member:core:model')
	implementation project(':domain:member:core:service')
	implementation project(':domain:member:core:enumerate')
	implementation project(':domain:schedules:api:controller')
	implementation project(':domain:category:api:controller')
	implementation project(':domain:attach:api:controller')
	implementation project(':domain:notification:api:controller')
	implementation project(':domain:schedules:infrastructure:rdb')
	implementation project(':domain:category:infrastructure:rdb')
	implementation project(':domain:attach:infrastructure:rdb')
	implementation project(':domain:attach:connector:out-bound')
	implementation project(':domain:attach:connector:in-bound')
	implementation project(':domain:attach:core:service')
	implementation project(':domain:attach:core:model')
	implementation project(':domain:attach:core:exception')
	implementation project(':domain:notification:connector:in-bound')
	implementation project(':domain:notification:connector:out-bound')
	implementation project(':domain:notification:connector:out-bound:api-client')
	implementation project(':domain:notification:core:service')
	implementation project(':domain:notification:core:model')
	implementation project(':domain:notification:core:enumerate')
	implementation project(':domain:notification:infrastructure:rdb')
	implementation project(':domain:schedules:connector:out-bound')
	implementation project(':domain:schedules:connector:out-bound:open-ai')
	implementation project(':domain:schedules:core:service')
	implementation project(':domain:schedules:core:model')
	
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'net.javacrumbs.shedlock:shedlock-spring:5.9.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-redis-spring:5.9.0'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.8.0'
	testImplementation 'org.testcontainers:testcontainers:1.19.3'
	// Testcontainers - Kafka
	testImplementation 'org.testcontainers:kafka:1.19.3'
	// Testcontainers - JUnit 연동
	testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
	// Awaitility (비동기)
	testImplementation 'org.awaitility:awaitility:4.2.0'
	// DB 테스트컨테이너 MySQL
	testImplementation 'org.testcontainers:mysql:1.19.3'
	// Redis
	testImplementation 'com.redis:testcontainers-redis:2.2.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
}

springBoot {
	mainClass = 'com.example.BootStrapApplication'
}

jib {
	from {
		image = 'eclipse-temurin:17-jre-alpine'
	}
	to {
		image = 'well4149/schedule-management'
		auth {
			username = findProperty("dockerHubUsername") ?: System.getenv("DOCKER_USERNAME") ?: ""
			password = findProperty("dockerHubPassword") ?: System.getenv("DOCKER_PASSWORD") ?: ""
		}
	}
	container {
		ports = ['8082']
		jvmFlags = ['-Dserver.port=8082',
					'-Dspring.profiles.active=prod',
					'-Xms256m',
					'-Xmx512m',
					'-XX:+UseG1GC',
					'-XX:MaxMetaspaceSize=512m',
					'-XX:MaxDirectMemorySize=64m',
					'-XX:+UseContainerSupport',
					'-Duser.timezone=Asia/Seoul']
		//creationTime = 'USE_CURRENT_TIMESTAMP'
		environment = [
				'SPRING_KAFKA_BOOTSTRAP_SERVERS': 'kafka:9092',
				'SPRING_DATA_REDIS_HOST': 'redis',
				'SPRING_DATASOURCE_URL'    : findProperty("SPRING_DATASOURCE_URL") ?: "",
				'SPRING_DATASOURCE_USERNAME': findProperty("SPRING_DATASOURCE_USERNAME") ?: "",
				'SPRING_DATASOURCE_PASSWORD': findProperty("SPRING_DATASOURCE_PASSWORD") ?: "",
				'JWT_SECRET'               : findProperty("JWT_SECRET") ?: "",
				'MAIL_USERNAME'            : findProperty("MAIL_USERNAME") ?: "",
				'MAIL_PASSWORD'            : findProperty("MAIL_PASSWORD") ?: ""
		]
	}
	// 캐시 비활성화 → 불필요한 레이어 줄이기
	allowInsecureRegistries = true
}

tasks.named('jar') {
	from('src/main/resources/logback-spring.xml') {
		into 'BOOT-INF/classes'
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(ProcessResources).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}